// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/nori-io/common/v5/pkg/domain/logger"
	"github.com/nori-io/common/v5/pkg/domain/registry"
	"github.com/nori-io/interfaces/database/gorm"
	http2 "github.com/nori-io/interfaces/nori/http"
	"github.com/nori-plugins/profile/internal/config"
	"github.com/nori-plugins/profile/internal/handler/http"
	profile3 "github.com/nori-plugins/profile/internal/handler/http/profile"
	"github.com/nori-plugins/profile/internal/repository/profile"
	profile2 "github.com/nori-plugins/profile/internal/service/profile"
	"github.com/nori-plugins/profile/internal/transactor"
)

// Injectors from wire.go:

func Initialize(registry2 registry.Registry, config2 config.Config, logger2 logger.FieldLogger) (*http.Handler, error) {
	router, err := http2.GetRouter(registry2)
	if err != nil {
		return nil, err
	}
	db, err := pg.GetGorm(registry2)
	if err != nil {
		return nil, err
	}
	params := transactor.Params{
		Db:     db,
		Logger: logger2,
	}
	transactorTransactor := transactor.New(params)
	profileRepository := profile.New(transactorTransactor)
	profileParams := profile2.Params{
		ProfileRepository: profileRepository,
	}
	profileService := profile2.New(profileParams)
	params2 := profile3.Params{
		ProfileService: profileService,
		Logger:         logger2,
	}
	handler := profile3.New(params2)
	httpHandler := &http.Handler{
		R:              router,
		ProfileHandler: handler,
	}
	return httpHandler, nil
}

// wire.go:

var set = wire.NewSet(pg.GetGorm, http2.GetRouter)
